t3 > 56
t3 - 10
t3 - 10.5
5 % 2
5 mod 2
5 'mod' 2
5 %% 2
14 %% 3
t3 %% 9
t <- c("2015-01-01 00:10:00", "2015-01-01 01:06:00", "2015-10-12 12:50:00")
t2 <- strptime(t, form)
t2[3] - t2[1]
t2[3] - t2[1] > 284
t2[3] - t2[1] > 285
t2[3] - (t2[1] + 1)
t2[3] - (t2[1] + 10)
t2[3] - (t2[1] + 100)
t2[3] - (t2[1] + 1000)
t2[3] - (t2[1] + 10000)
t2[3] - (t2[1] + 100000)
source("~/GitHub/OWFSim/R/weather.R")
t3
as.numeric(t3)
as.numeric(t3, units = "secs")
as.numeric(t3, units = "hours")
floor(as.numeric(t3, units = "hours"))
t[1]
t2[1]
t2[1]$min
t2[1]$min <- 0
t2[1]$min
t2[1]
t2
t2$min
t2$min <- 0
t2$min
t2
source("~/GitHub/OWFSim/R/weather.R")
waveheight$Time$min <- 0
View(waveheight)
source("~/GitHub/OWFSim/R/weather.R")
waveheight$Time$min
(waveheight$Time)$min
(waveheight$Time)$min <- 0
waveheight$Time$min <- 0
source("~/GitHub/OWFSim/R/weather.R")
t <- waveheight$Time
View(t)
t$min
t$min <- 1
t <- waveheight$Time
t2 <- t - 1
t2 <- waveheight$Time - 1
?as.vector
t3 <- as.vector(t)
typeof(t3)
typeof(t2)
typeof(t)
typeof(waveheight)
typeof(waveheight$Time)
mode(t3)
mode(t2)
mode(t)
mode(waveheight)
mode(waveheight$Time)
t4 <- t2
t4 <- t2 + 1
t4$min
?lapply
t2[1]
as.numeric(t2[1])
as.numeric(t4[1])
as.numeric(t4[2])
as.numeric(t4[2000]) - as.numeric(t4[1])
120060 / 60
as.numeric(t4[2000] - t4[1])
as.numeric(t4[2000] - t4[1], units="min")
as.numeric(t4[2000] - t4[1], units="minutes")
as.numeric(t4[2000] - t4[1], units="mins")
as.numeric(t4[2000] - t4[1], units="hours")
f <- function(x, b) {
floor(as.numeric(x - b, units="hours"))}
f(t4[2000], t4[1])
?mutate
library(dplyr)
?mutate
f <- function(x) {
floor(as.numeric(x - t4[1], units="hours"))}
f(t4[2000])
sapply(t, f)
mutate(waveheight, Hour = f(Time))
View(waveheight[[1]][[1]])
waveheight = mutate(waveheight, Hour = f(Time))
aggregate(Value ~ Hour, waveheight, max)
waveheight$Time$mon
waveheight[1000:2000]$Time$mon
waveheight[1000:2000]
waveheight[1000]
waveheight[1000,]
waveheight[1000:2000, 1]
waveheight[1000:2000, 1]$mon
waveheight[10000:12000, 1]$mon
waveheight[100000:100100, 1]$mon
waveheight = mutate(waveheight, Month = Time$mon)
aggregate(Value ~ Hour + Month, waveheight, max)
source("~/GitHub/OWFSim/R/weather.R")
colnames(weather)
colnames(weather)[3]
colnames(weather)[3] <- "MaxWave"
temp <- mutate(windspeed, Hour = getHour(Time), Month = Time$mon)
waveheight[1,1]
waveheight[1,2]
waveheight[2,1]
start = waveheight[1,1]
getHour <- function(x) {
floor(as.numeric(x - start, units="hours"))}
temp <- mutate(windspeed, Hour = getHour(Time), Month = Time$mon)
windspeed$Time <- strptime(windspeed$Time, form)
temp <- mutate(windspeed, Hour = getHour(Time), Month = Time$mon)
?select
select(temp, Hour >= 0)
subset(temp, Hour >= 0)
temp <- aggregate(Value ~ Hour + Month, subset(mutate(windspeed, Hour = getHour(Time), Month = Time$mon), Hour >= 0), max)
View(temp)
View(weather)
View(waveheight)
cbind(weather, temp)
?cbind
?full_join
full_join(weather, temp)
source("~/GitHub/OWFSim/R/weather.R")
source("~/GitHub/OWFSim/R/weather.R")
colnames(weather)[4] <- "MaxWind"
colnames(weather)[3] <- "MaxWave"
weather <- mutate(weather, Allowed1 = MaxWave <= 1.5, Allowed2 = MaxWave <= 2.0 && MaxWind <= 10.0)
?ratio
?count
average(c(1, 4, 6, 2))
mean(c(1, 4, 6, 2))
mean(c(1, 4, 6, 3))
mean(c(T, F, F, T))
mean(c(T, F, F, T, F))
aggregate(Allowed1 ~ Month, weather, mean)
?aggregate
aggregate(cbind(Allowed1, Allowed2) ~ Month, weather, mean)
?count
count(weather$Allowed2)
tally(weather$Allowed2)
summarize(weather$Allowed1)
sum(c(T, F, F, T, F))
sum(Allowed1)
sum(weather$Allowed1)
length(weather[Allowed1 == T])
length(weather[weather$Allowed1 == T])
length(weather$Allowed1[weather$Allowed1 == T])
length(weather$Allowed2[weather$Allowed2 == T])
length(weather$MaxWave[weather$MaxWave <= 2.0])
length(weather$MaxWave[weather$MaxWind <= 10.0])
length(weather$MaxWind[weather$MaxWind <= 10.0])
length(weather[weather$MaxWind <= 10.0])
length(weather[weather$MaxWind <= 10.0 && weather$MaxWave <= 2.0])
?&&
length(weather[weather$MaxWind <= 10.0 & weather$MaxWave <= 2.0])
length(weather$Hour[weather$MaxWind <= 10.0 & weather$MaxWave <= 2.0])
weather <- mutate(weather, Allowed1 = MaxWave <= 1.5, Allowed2 = MaxWave <= 2.0 & MaxWind <= 10.0)
aggregate(cbind(Allowed1, Allowed2) ~ Month, weather, mean)
test <- c(T, F, F, F, T, T, F, NA, NA)
sum(test)
mean(test)
mean(test[1:4])
mean(test[1:5])
mean(test[1:6])
mean(test[1:7])
mean(test[1:8])
is.na(NA)
is.na(T)
weather <- mutate(weather, Allowed1 = MaxWave <= 1.5, Allowed2 = (MaxWave <= 2.0 | is.na(MaxWave)) & (MaxWind <= 10.0 | is.na(MaxWind)))
weather <- mutate(weather, Allowed1 = MaxWave <= 1.5, Allowed2 = (MaxWave <= 2.0 | is.na(MaxWave)) & (MaxWind <= 10.0 | is.na(MaxWind)) & !(is.na(MaxWave) & is.na(MaxWind)))
weather[weather$MaxWind == -999]
weather$MaxWind[weather$MaxWind == -999]
weather$MaxWind[weather$MaxWind == -999] <- NA
weather <- mutate(weather, Allowed1 = MaxWave <= 1.5, Allowed2 = (MaxWave <= 2.0 | is.na(MaxWave)) & (MaxWind <= 10.0 | is.na(MaxWind)) & !(is.na(MaxWave) & is.na(MaxWind)))
weather <- mutate(weather, Allowed1 = MaxWave <= 1.5, Allowed2 = (MaxWave <= 2.0 | is.na(MaxWave)) & (MaxWind <= 10.0 | is.na(MaxWind)))
weather$Allowed2[is.na(weather$MaxWave) & is.na(weather$MaxWind)]
weather$Allowed2[is.na(weather$MaxWave) & is.na(weather$MaxWind)] <- NA
source("~/GitHub/OWFSim/R/weather.R")
?select
?subset
subset(weather, subset = !is.na(MaxWind))
subset(weather, subset = !is.na(MaxWind) & !is.na(MaxWave))
aggregate(cbind(Allowed1, Allowed2) ~ Month, subset(weather, subset = !is.na(MaxWind) & !is.na(MaxWave)), mean)
aggregate(cbind(Allowed1, Allowed2) ~ Month, subset(weather, subset = !(is.na(MaxWind) & is.na(MaxWave))), mean)
source("~/GitHub/OWFSim/R/weather.R")
source("~/GitHub/OWFSim/R/weather.R")
source("~/GitHub/OWFSim/R/weather.R")
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsAgg, columns = c(2, 3, 4, 5, 6, 7), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5)
ggparcoord(resultsDur, columns = c(3, 4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(aes(lty = as.factor(Dur)), size = 1.5) +
scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid", "blank", "dotdash", "dashed"))
ggparcoord(resultsTurb, columns = c(3, 4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(aes(lty = as.factor(Turbines)), size = 1.5) +
scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid", "blank", "dotdash", "dashed"))
ggparcoord(resultsVes, columns = c(4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(aes(lty = as.factor(Vessels)), size = 1.5) +
scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid", "dotdash", "dashed"))
ggparcoord(resultsPerc, columns = c(4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(aes(lty = as.factor(Percent)), size = 1.5) +
scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid", "dotdash", "dashed"))
ggparcoord(resultsSize, columns = c(3, 4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(aes(lty = as.factor(Size)), size = 1.5) +
scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid"))
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsSize, columns = c(4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(aes(lty = as.factor(Size)), size = 1.5) +
scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid"))
resultsSize
resultsSize[-11]
resultsSize[-11,]
ggparcoord(resultsSize[-11,], columns = c(4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(aes(lty = as.factor(Size)), size = 1.5) +
scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid"))
ggparcoord(resultsAgg, columns = c(2, 3, 4, 5, 6, 7), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5)
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsAgg, columns = c(2, 3, 4, 5, 6, 7), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5)
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsAgg, columns = c(2, 3, 4, 5, 6, 7), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5)
??ggparcoord
source("~/GitHub/OWFSim/R/plotting.R")
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsAgg, columns = c(2, 3, 4, 5, 6, 7), groupColumn = "Category", scale = "globalminmax", boxplot = T) +
geom_line(size = 1.5)
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsAgg, columns = c(2, 3, 4, 5, 6, 7), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5) +
geom_boxplot()
?geom_boxplot
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsAgg, columns = c(2, 3, 4, 5, 6, 7), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5) +
geom_boxplot(data = resultsRaw)
source("~/GitHub/OWFSim/R/plotting.R")
source("~/GitHub/OWFSim/R/plotting.R")
?select
select(resultsRaw, Objective)
select(resultsRaw, Objective, ProdLoss)
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsAgg, columns = c(2, 3, 4, 5, 6, 7), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5) +
geom_boxplot(data = select(resultsRaw, Objective, ProdLoss, DirCosts, VesCosts, RepCosts, TechCosts))
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsAgg, columns = c(2, 3, 4, 5, 6, 7), groupColumn = "Category", scale = "globalminmax", boxplot = T) +
geom_line(size = 1.5)
?ggparcoord
source("~/GitHub/OWFSim/R/plotting.R")
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsAgg, columns = c(2, 3, 4, 5, 6, 7), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5) +
facet_wrap(~ Category)
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsDur, columns = c(3, 4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(aes(lty = as.factor(Dur)), size = 1.5) +
#scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid", "blank", "dotdash", "dashed")) +
facet_wrap(~ Category)
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsDur, columns = c(3, 4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5) +
#scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid", "blank", "dotdash", "dashed")) +
facet_wrap(~ Category)
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsDur, columns = c(3, 4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5) +
#scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid", "blank", "dotdash", "dashed")) +
facet_wrap(~ Dur)
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsSize, columns = c(4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5) +
#scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid"))
facet_wrap(~ Size)
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsSize, columns = c(4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax", boxplot = T) +
geom_line(size = 1.5) +
#scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid"))
facet_wrap(~ Size)
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsRaw, columns = c(4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax", boxplot = T) +
geom_line(size = 1.5)
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsRaw, columns = c(5, 6, 7, 8, 9), groupColumn = "Category", scale = "globalminmax", boxplot = T) +
geom_line(size = 1.5)
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsRaw, columns = c(5, 6, 7, 8, 9), groupColumn = "Category", scale = "globalminmax", boxplot = T)
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsSize, columns = c(4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5) +
#scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid"))
facet_wrap(~ Size)
wh <- read_csv("data/WHData-2018.csv")
wh <- read.csv("data/WHData-2018.csv")
wh <- read.csv("WHData-2018.csv")
wh <- read.csv2("WHData-2018.csv")
ggparcoord(data = wh,
columns = c(7:12))
ggparcoord(data = wh,
columns = c(4:10))
ggparcoord(data = wh,
columns = c(4:9))
ggparcoord(data = wh,
columns = c(4:9),
groupColumn = 2,
scale = "uniminmax",
boxplot = TRUE,
title = "Parallel Coord. Plot of World Happines Attributes")
library(GGally)
library(plotly)
library(parcoords)
library(tidyverse)
packages = c('GGally', 'plotly', 'parcoords', 'tidyverse')
for(p in packages){
if(!require(p, character.only = T)){
install.packages(p)
}
}
library(plotly)
library(parcoords)
library(tidyverse)
ggparcoord(data = wh,
columns = c(4:9),
groupColumn = 2,
scale = "uniminmax",
boxplot = TRUE,
title = "Parallel Coord. Plot of World Happines Attributes")
ggparcoord(data = wh,
columns = c(4:9),
groupColumn = 1,
scale = "uniminmax",
boxplot = TRUE,
title = "Parallel Coord. Plot of World Happines Attributes")
source("~/GitHub/OWFSim/R/plotting.R")
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsSize, columns = c(4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5) +
scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid"))
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsSize, columns = c(4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(aes(lty = as.factor(Size)), size = 1.5) +
scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid"))
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsSize, columns = c(4, 5, 6, 7, 8), groupColumn = "Size", scale = "globalminmax") +
geom_line(aes(lty = as.factor(Size)), size = 1.5) +
scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid"))
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsSize, columns = c(4, 5, 6, 7, 8), groupColumn = 2, scale = "globalminmax") +
geom_line(aes(lty = as.factor(Size)), size = 1.5) +
scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid"))
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsSize, columns = c(4, 5, 6, 7, 8), groupColumn = c(1, 2), scale = "globalminmax") +
geom_line(aes(lty = as.factor(Size)), size = 1.5) +
scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid"))
source("~/GitHub/OWFSim/R/plotting.R")
ggparcoord(resultsSize, columns = c(4, 5, 6, 7, 8), groupColumn = "Category", scale = "globalminmax") +
geom_line(aes(lty = as.factor(Size)), size = 1.5) +
scale_linetype_manual(values=c("twodash", "dotted", "longdash", "solid"))
ggparcoord(resultsRaw, columns = c(5, 6, 7, 8, 9), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5)
ggparcoord(resultsRaw, columns = c(5, 6, 7, 8, 9), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 0.5)
ggparcoord(resultsRaw, columns = c(5, 6, 7, 8, 9), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 0.5) +
facet_wrap(~ Size)
ggparcoord(resultsRaw, columns = c(6, 7, 8, 9), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 0.5) +
facet_wrap(~ Size)
ggparcoord(resultsRaw, columns = c(5, 6, 7, 8, 9), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 0.5) +
facet_wrap(~ Size)
ggparcoord(resultsRaw, columns = c(5, 6, 7, 8, 9), groupColumn = "Category", scale = "uniminmax") +
geom_line(size = 0.5) +
facet_wrap(~ Size)
ggparcoord(resultsRaw, columns = c(5, 6, 7, 8, 9), groupColumn = "Category", scale = "globalminmax", boxplot = T) +
geom_line(size = 0.5) +
facet_wrap(~ Size)
?parcoords
parcoords(resultsRaw)
parcoords(resultsAgg)
source("~/GitHub/OWFSim/R/plotting.R")
source("~/GitHub/OWFSim/R/plotting.R")
library(parcoords)
?parcoords
parcoords(resultsRaw, rownames = F)
parcoords(resultsRaw, rownames = F, color = list(colorScale = scaleOrdinal, colorBy = Category, colorScheme = schemCategory10))
parcoords(resultsRaw, rownames = F, color = list(colorScale = "scaleOrdinal", colorBy = Category, colorScheme = schemCategory10))
parcoords(resultsRaw, rownames = F, color = list(colorScale = "scaleOrdinal", colorBy = "Category", colorScheme = schemCategory10))
parcoords(resultsRaw, rownames = F, color = list(colorScale = "scaleOrdinal", colorBy = "Category", colorScheme = "schemCategory10"))
parcoords(resultsRaw, rownames = F, color = list(colorScale = "scaleOrdinal", colorBy = "Category"))
parcoords(resultsRaw, rownames = F, color = list(colorScale = "scaleSequential", colorBy = "Category"))
parcoords(resultsRaw, rownames = F, color = 0x1f1f1f)
parcoords(resultsRaw, rownames = F, color = 0x0f0f0f)
parcoords(resultsRaw, rownames = F, color = 0x1f001f)
parcoords(resultsRaw, rownames = F, color = 0x000000)
parcoords(resultsRaw, rownames = F, color = list(colorBy = "Category"))
parcoords(resultsRaw, rownames = F, color = list(colorBy = Category))
ggparcoord(resultsAgg, columns = c(2, 3, 4, 5, 6, 7), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5)
ggparcoord(resultsRaw, columns = c(1, 5, 6, 7, 8, 9), groupColumn = "Category", scale = "globalminmax") +
geom_line(size = 1.5)
ggparcoord(resultsRaw, columns = c(1, 5, 6, 7, 8, 9), groupColumn = "Category", scale = "globalminmax")
ggparcoord(resultsRaw, columns = c(1, 5, 6, 7, 8, 9), groupColumn = "Size", scale = "globalminmax")
?select
?filter
filter(resultsRaw, Category != "Sep")
ggparcoord(filter(resultsRaw, Category != "Sep"), columns = c(1, 5, 6, 7, 8, 9), groupColumn = "Size", scale = "globalminmax")
ggparcoord(aggregate(cbind(Objective, ProdLoss, DirCosts, VesCosts, RepCosts, TechCosts) ~ Size, resultsRaw, mean), columns = c(1, 5, 6, 7, 8, 9), groupColumn = "Size", scale = "globalminmax")
test <- aggregate(cbind(Objective, ProdLoss, DirCosts, VesCosts, RepCosts, TechCosts) ~ Size, resultsRaw, mean) %>% transform(Size = chr(Size))
ggparcoord(test, columns = c(1, 5, 6, 7, 8, 9), groupColumn = "Size", scale = "globalminmax")
view(test)
View(test)
ggparcoord(test, columns = c(2, 3, 4, 5, 6, 7), scale = "globalminmax")
normalized <- select(resultsRaw, c(1, 5, 6, 7, 8, 9, 14))
?mutate
normalized/normalized[,7]
normalized <- select(normalized/normalized[,7], -1)
normalized <- select(resultsRaw, c(1, 5, 6, 7, 8, 9, 14))
normalized <- select(normalized/normalized[,7], -7)
ggparcoord(normalized)
ggparcoord(normalized, scale = "globalminmax")
normalized <- select(resultsRaw, c(1, 5, 6, 7, 8, 9, 14))
normalized <- select(normalized/normalized[,7], -7)
normalized <- mutate(normalized, Size = resultsRaw$Size)
ggparcoord(normalized, groupcolumn = 7, scale = "globalminmax")
ggparcoord(normalized, groupColumn = 7, scale = "globalminmax")
ggparcoord(normalized, columns = -1, groupColumn = 7, scale = "globalminmax")
ggparcoord(normalized, columns = c(2, 3, 4, 5, 6, 7), groupColumn = 7, scale = "globalminmax")
test <- aggregate(cbind(Objective, ProdLoss, DirCosts, VesCosts, RepCosts, TechCosts) ~ Dur, resultsRaw, mean)
ggparcoord(test)
ggparcoord(resultsRaw, groupColumn = "Dur")
ggparcoord(resultsRaw, groupColumn = "Dur", scale = "globalminmax")
ggparcoord(resultsRaw, columns = c(1, 5, 6, 7, 8, 9), groupColumn = "Dur", scale = "globalminmax")
ggparcoord(filter(resultsRaw, Category != "Sep"), columns = c(1, 5, 6, 7, 8, 9), groupColumn = "Dur", scale = "globalminmax")
test <- select(resultsRaw, c(1, 5, 6, 7, 8, 9, 11))
test <- mutate(test, Obj = Objective / )
?map
def convDur(s): if(s == "2Y") return 24
define convDur(s): if(s == "2Y") return 24
?unique
unique(test$Dur)
conv <- list(24, 6, 12, 21, 18, 33, 30)
conv(1)
conv[1]
conv <- c(24, 6, 12, 21, 18, 33, 30)
?list
pairlist(unique(test$Dur), c(24, 6, 12, 21, 18, 33, 30))
conv <- pairlist(unique(test$Dur), c(24, 6, 12, 21, 18, 33, 30))
mylist <- list()
mylist[["2Y"]] <- 24
mylist[["2Y"]]
mylist[["Su"]] <- 6
mylist[["Ye"]] <- 12
mylist[["2SL"]] <- 21
mylist[["2SS"]] <- 18
mylist[["3SL"]] <- 33
mylist[["3SS"]] <- 30
mylist[[unique(test$Dur)]]
mylist[unique(test$Dur)]
mylist["2Y"]
mylist[["2Y"]]
mylist[["2Y"]] + 4
mylist("2Y")
conv <- function(d) { return(mylist[[d]]) }
conv("2Y")
test <- mutate(test, D = conv(Dur))
test <- mutate(test, D = mylist[[Dur]])
test2 <- mutate(test, D = mylist[[Dur]])
test <- mutate(test, Durat = mylist[[Dur]])
?mutate
test <- mutate(test, Durat = mylist[[Dur]][1])
test <- mutate(test, Dur = mylist[[Dur]])
test$Dur = conv(Dur)
test$Dur = conv(test$Dur)
map(test$Dur, conv)
?map
map(test$Dur, conv())
library(purrr)
map(test$Dur, conv())
map(test$Dur, conv)
test$Dur <- map(test$Dur, conv)
unlist(test$Dur)
test$Dur <- unlist(test$Dur)
ggparcoord(filter(resultsRaw, Category != "Sep"), columns = c(1, 5, 6, 7, 8, 9), groupColumn = "Dur", scale = "globalminmax")
ggparcoord(resultsRaw, columns = c(1, 5, 6, 7, 8, 9), groupColumn = "Dur", scale = "globalminmax")
ggparcoord(test, groupColumn = "Dur", scale = "globalminmax")
testNorm <- test
testNorm$Objective <- testNorm$Objective / testNorm$Dur
ggparcoord(testNorm, groupColumn = "Dur", scale = "globalminmax")
ggparcoord(testNorm, groupColumn = "Dur", columns = 1, scale = "globalminmax")
ggparcoord(testNorm, groupColumn = "Dur", columns = c(1, 2), scale = "globalminmax")
ggparcoord(testNorm, groupColumn = "Dur", columns = c(1, 7), scale = "globalminmax")
ggparcoord(testNorm[-3,], groupColumn = "Dur", columns = c(1, 7), scale = "globalminmax")
ggparcoord(test[-3,], groupColumn = "Dur", columns = c(1, 7), scale = "globalminmax")
testNorm <- test
testNorm <- testNorm / testNorm$Dur
ggparcoord(testNorm[-3,], groupColumn = "Dur", scale = "globalminmax")
ggparcoord(test[-3,], scale = "globalminmax")
testNorm <- test
testNorm[,-7] <- testNorm[,-7] / testNorm$Dur
ggparcoord(testNorm[-3,], groupColumn = "Dur", scale = "globalminmax")
ggparcoord(test[-3,], groupColumn = "Dur", scale = "globalminmax")
source("~/GitHub/OWFSim/R/plotting.R")
